
Parameters:
  TaskFamily:
    Type: String
    Description: The family name of the task in use

  TaskDefinition:
    Type: String
    Description: The identifier of the ECS TaskDefinition to use

  ECSCluster:
    Type: String
    Description: The identifier of the ECS Cluster to use

  ContainerName:
    Type: String
    Description: The container to attach to the service

  ContainerPort:
    Type: Number
    Description: The port on the container to open
    Default: 80

  ELBPort:
    Type: Number
    Description: The port on the load balancer to open
    Default: 80

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: A security group for the ELB that has access to the ECS Cluster Instances

  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: The VPC for the Security Group

  Subnets:
    Type: CommaDelimitedList
    Description: Subnets to create the ELB in

  HealthCheckUrl:
    Type: String
    Description: The URL to hit when doing healthchecks from the ELB
    Default: /

Outputs:
  StackType:
    Value: "ecs-former::ecs-service"

  ECSLoadBalancer:
    Value: http://$(ECSLoadBalancer[DNSName]):$(ELBPort)

  ECSCluster:
    Value: $(ECSCluster)

  ECSService:
    Value: $(ECSService)

  TaskFamily:
    Value: $(TaskFamily)

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
       GroupDescription : Security group for ELB in front of ECS
       VpcId : $(Vpc)
       SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: $(ELBPort)
          ToPort: $(ELBPort)
          CidrIp: 0.0.0.0/0

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: $(Subnets)
      SecurityGroups: [ $(ELBSecurityGroup), $(ECSSecurityGroup) ]
      Listeners:
        - LoadBalancerPort: $(ELBPort)
          InstancePort: $(ContainerPort)
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:$(ContainerPort)$(HealthCheckUrl)
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: $(ECSCluster)
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: $(ContainerName)
          ContainerPort: $(ContainerPort)
          LoadBalancerName: $(ECSLoadBalancer)
      Role: $(ECSServiceRole)
      TaskDefinition: $(TaskDefinition)

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: "*"
