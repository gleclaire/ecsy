---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
    ECS Service: A Service and a Task Definition

Parameters:
    VpcId:
        Type: AWS::EC2::VPC::Id
        Description: The identifier of VPC to run in

    VpcPublicSubnet1Id:
        Type: AWS::EC2::Subnet::Id
        Description: The first public subnet in the VPC specified with VpcId

    VpcPublicSubnet2Id:
        Type: AWS::EC2::Subnet::Id
        Description: The second public subnet in the VPC specified with VpcId

    ECSCluster:
        Type: String
        Description: The ECS cluster to attach the service to

    ECSHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup::Id
        Description: A security group that can access ECS instances

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup::Id
        Description: A security group for the load balancer

    TaskFamily:
        Type: String
        Description: The family name of the task in use

    TaskFamily:
        Type: String
        Description: The family name of the task in use

    TaskDefinition:
        Type: String
        Description: The identifier of the ECS TaskDefinition to use

    ContainerName:
        Type: String
        Description: The container to attach to the service

    ContainerPort:
        Type: Number
        Description: The port on the container to open
        Default: 80

    ListenerPort:
        Type: Number
        Description: The port on the load balancer to open
        Default: 80

    SSLCertificateArn:
        Type: String
        Description: An ARN of an SSL certificate to use for the load balancer
        Default: ""

    DesiredCount:
        Type: Number
        Description: The number of instances of the task to run
        Default: 1

Conditions:
    UseHttpListener:
        !Equals [ !Ref SSLCertificateArn, "" ]

    UseHttpsListener:
        !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ]

    IsHttpsDefaultPort:
        !And [
            !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ],
            !Equals [ !Ref ListenerPort, "443" ],
        ]

    IsHttpDefaultPort:
        !And [
            !Equals [ !Ref SSLCertificateArn, "" ],
            !Equals [ !Ref ListenerPort, "80" ],
        ]

Outputs:
    StackType:
        Value: "ecs-former::ecs-service"

    ECSCluster:
        Value: !Ref ECSCluster

    ECSLoadBalancer:
        Value: !If [
                "UseHttpsListener",
                !If [
                    IsHttpsDefaultPort,
                    "https://${LoadBalancer.DNSName}",
                    "https://${LoadBalancer.DNSName}:${ListenerPort}"
                ],
                !If [
                    IsHttpDefaultPort,
                    "http://${LoadBalancer.DNSName}",
                    "http://${LoadBalancer.DNSName}:${ListenerPort}"
                ]
            ]

    ECSService:
        Value: !Ref ECSService

    TaskFamily:
        Value: !Ref TaskFamily

Resources:
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - !Ref VpcPublicSubnet1Id
                - !Ref VpcPublicSubnet2Id
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VpcId
            Port: !Ref ContainerPort
            Protocol: HTTP
            HealthCheckIntervalSeconds: 10
            HealthCheckProtocol: TCP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: !Ref ListenerPort
            Protocol: !If [ "UseHttpsListener", HTTPS, HTTP ]
            Certificates:
                !If [ "UseHttpsListener", !Ref SSLCertificateArn, "AWS::NoValue" ]
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup

    ECSService:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref ECSCluster
            DesiredCount: !Ref DesiredCount
            LoadBalancers:
                - ContainerName: !Ref ContainerName
                  ContainerPort: !Ref ContainerPort
                  TargetGroupArn: !Ref TargetGroup
            Role: !Ref ECSServiceRole
            TaskDefinition: !Ref TaskDefinition

    ECSServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                                - ecs.amazonaws.com
                          Action:
                                - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                                - elasticloadbalancing:Describe*
                                - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                                - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                                - ec2:Describe*
                                - ec2:AuthorizeSecurityGroupIngress
                            Resource: "*"
