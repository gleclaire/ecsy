
## Creates Amazon Elastic Container Service cluster
## http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html

Parameters:
  KeyName:
    Description: The ssh keypair used to access the ecs instances
    Type: AWS::EC2::KeyPair::KeyName

  AuthorizedUsersUrl:
    Description: Optional - An url to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  InstanceType:
    Description: The type of instance to use for the instances
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge

  MaxSize:
    Description: The maximum number of instances to launch
    Type: Number
    Default: 6

  DesiredCapacity:
    Description: The desired capacity after launch
    Type: Number
    Default: 3

  MinSize:
    Description: The minumum number of instances to launch
    Type: Number
    Default: 1

  DockerHubUsername:
    Type: String
    Description: Your username on the Docker Hub
    Default: ''

  DockerHubEmail:
    Type: String
    Description: Your email address on the Docker Hub
    Default: ''

  DockerHubPassword:
    Type: String
    Description: Your password on the Docker Hub
    NoEcho: true
    Default: ''

  ECSCluster:
    Type: String
    Description: The name of the ECS cluster

  LogspoutTarget:
    Type: String
    Description: Optional. logspout destination eg papertrail endpoint.
    Default: ""

  DatadogApiKey:
    Type: String
    Description: Optional. The datadog API key to push docker events into datadog.
    Default: ""

Outputs:
  StackType:
    Value: "ecs-former::ecs-stack"

  ECSCluster:
    Value: $(ECSCluster)

  SecurityGroup:
    Value: $(SecurityGroup)

# amzn-ami-2015.09.b-amazon-ecs-optimized
# See http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html
Mappings:
  AWSRegionToAMI:
    us-east-1: { AMIID: ami-ddc7b6b7 }
    us-west-2: { AMIID: ami-a39df1c3 }
    eu-west-1: { AMIID: ami-f1b46b82 }
    ap-northeast-1: { AMIID: ami-3077525e }
    ap-southeast-2: { AMIID: ami-23b4eb40 }

Resources:
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
            Resource: "*"
      Roles:
        - $(IAMRole)

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ $(Subnet0), $(Subnet1), $(Subnet2) ]
      LaunchConfigurationName: $(LaunchConfiguration)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      DesiredCapacity: $(DesiredCapacity)
      Tags:
        - { Key: Role, Value: ecs-instance, PropagateAtLaunch: true }
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      InstanceMonitoring: true
      SecurityGroups: [ $(SecurityGroup) ]
      ImageId: $(AWSRegionToAMI[$(AWS::Region)][AMIID])
      InstanceType: $(InstanceType)
      IamInstanceProfile: $(EC2InstanceProfile)
      KeyName: $(KeyName)
      UserData: !Base64 |
        #!/bin/bash -xve
        yum install -y aws-cfn-bootstrap
        /opt/aws/bin/cfn-init -v --stack $(AWS::StackName) --resource LaunchConfiguration --region $(AWS::Region)
        /opt/aws/bin/cfn-signal -e \$? --stack $(AWS::StackName) --resource ECSAutoScalingGroup --region $(AWS::Region)
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/ecs/ecs.config:
              content: |
                ECS_CLUSTER=$(ECSCluster)
                ECS_ENGINE_AUTH_TYPE=docker
                ECS_ENGINE_AUTH_DATA={"https://index.docker.io/v1/":{"username":"$(DockerHubUsername)","password":"$(DockerHubPassword)","email":"$(DockerHubEmail)"}}
              mode: "000600"
              owner: root
              group: root
            /etc/cron.hourly/authorized_keys:
              content: |
                #!/bin/bash -eu
                test -z "$(AuthorizedUsersUrl)" && exit 0
                curl --silent -f "$(AuthorizedUsersUrl)" > /tmp/authorized_keys
                mv /tmp/authorized_keys /home/ec2-user/.ssh/authorized_keys
                chmod 600 /home/ec2-user/.ssh/authorized_keys
                chown ec2-user: /home/ec2-user/.ssh/authorized_keys
              mode: "000700"
              owner: root
              group: root
          commands:
            fetch-authorized-users:
              command: /etc/cron.hourly/authorized_keys

            logspout:
              test: "test -n '$(LogspoutTarget)'"
              command: |
                #!/bin/bash -eu
                /usr/bin/docker run -d \
                  --name="logspout" \
                  --restart=always \
                  --hostname `hostname` \
                  --volume=/var/run/docker.sock:/tmp/docker.sock \
                  gliderlabs/logspout \
                  $(LogspoutTarget) &> /home/ec2-user/logspout.boot.log

            datadog:
              test: "test -n '$(DatadogApiKey)'"
              command: |
                #!/bin/bash -eu
                /usr/bin/docker run -d \
                  --restart=always \
                  --name dd-agent \
                  --hostname `hostname` \
                  -p 172.17.42.1:8125:8125/udp \
                  -e 'TAGS=cluster:$(ECSCluster)' \
                  -e 'API_KEY=$(DatadogApiKey)' \
                  -v /var/run/docker.sock:/var/run/docker.sock \
                  -v /proc/:/host/proc/:ro \
                  -v /cgroup/:/host/sys/fs/cgroup:ro \
                  datadog/docker-dd-agent &> /home/ec2-user/datadog.boot.log

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC/EC2 Security Group
      VpcId: $(Vpc)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: $(SecurityGroup)
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: $(SecurityGroup)
