
Description: |
  Creates an ECS Service and Load Balancer in a given ECS Cluster

Parameters:
  DockerImage:
    Type: String
    Description: The image to run in the container

  ContainerName:
    Type: String
    Description: The name of the docker container
    Default: app

  ContainerCpu:
    Type: Number
    Description: The number of cpu units dedicated to the container (1024 = 1 core)
    Default: 1024

  ContainerMemory:
    Type: Number
    Description: The maxmium amount of memory the container can allocate
    Default: 200

  ContainerPort:
    Type: Number
    Description: The port on the container and load balancer to open
    Default: 80

  ECSCluster:
    Type: String
    Description: The name of the ECSCluster to launch the application in

  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: The VPC that the load-balancer is running in

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets that for the load-balancer to run in (subnets of the above VPC)

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: A security group for the ELB that has access to the ECS Cluster Instances

Outputs:
  ECSCluster:
    Value: $(ECSCluster)
  ECSLoadBalancer:
    Value: $(ECSLoadBalancer)
  AppURL:
    Value: !Join ["", "http://", !GetAttr [ $(ECSLoadBalancer), "DNSName" ], ":",  $(ContainerPort)]

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: $(ContainerName)
          Cpu: $(ContainerCpu)
          Essential: true
          Image: $(DockerImage)
          Memory: $(ContainerMemory)
          PortMappings:
            - HostPort: $(ContainerPort)
              ContainerPort: $(ContainerPort)

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
       GroupDescription : Security group for ELB in front of ECS
       VpcId : $(Vpc)
       SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: $(ContainerPort)
          ToPort: $(ContainerPort)
          CidrIp: 0.0.0.0/0

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: $(Subnets)
      SecurityGroups: [ $(ELBSecurityGroup), $(SecurityGroup) ]
      Listeners:
        - LoadBalancerPort: $(ContainerPort)
          InstancePort: $(ContainerPort)
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:$(ContainerPort)/
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: $(ECSCluster)
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: $(ContainerName)
          ContainerPort: 80
          LoadBalancerName: $(ECSLoadBalancer)
      Role: $(ECSServiceRole)
      TaskDefinition: $(TaskDefinition)

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: "*"