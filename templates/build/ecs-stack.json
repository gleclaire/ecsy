{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Description": "The ssh keypair used to access the ecs instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "AuthorizedUsersUrl": {
      "Description": "Optional - An url to periodically download ssh authorized_keys from",
      "Type": "String",
      "Default": ""
    },
    "InstanceType": {
      "Description": "The type of instance to use for the instances",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge"
      ]
    },
    "MaxSize": {
      "Description": "The maximum number of instances to launch",
      "Type": "Number",
      "Default": 6
    },
    "DesiredCapacity": {
      "Description": "The desired capacity after launch",
      "Type": "Number",
      "Default": 3
    },
    "MinSize": {
      "Description": "The minumum number of instances to launch",
      "Type": "Number",
      "Default": 1
    },
    "DockerHubUsername": {
      "Type": "String",
      "Description": "Your username on the Docker Hub",
      "Default": ""
    },
    "DockerHubEmail": {
      "Type": "String",
      "Description": "Your email address on the Docker Hub",
      "Default": ""
    },
    "DockerHubPassword": {
      "Type": "String",
      "Description": "Your password on the Docker Hub",
      "NoEcho": "true",
      "Default": ""
    },
    "ECSCluster": {
      "Type": "String",
      "Description": "The name of the ECS cluster"
    }
  },
  "Outputs": {
    "SecurityGroup": {
      "Value": {
        "Ref": "SecurityGroup"
      }
    },
    "Vpc": {
      "Value": {
        "Ref": "Vpc"
      }
    },
    "Subnets": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "Subnet0"
            },
            {
              "Ref": "Subnet1"
            },
            {
              "Ref": "Subnet2"
            }
          ]
        ]
      }
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": {
        "AMIID": "ami-ddc7b6b7"
      },
      "us-west-2": {
        "AMIID": "ami-a39df1c3"
      },
      "eu-west-1": {
        "AMIID": "ami-f1b46b82"
      },
      "ap-northeast-1": {
        "AMIID": "ami-3077525e"
      },
      "ap-southeast-2": {
        "AMIID": "ami-23b4eb40"
      }
    }
  },
  "Resources": {
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
      }
    },
    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ]
      }
    },
    "IAMPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstancePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData",
                "cloudformation:DescribeStackResource",
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
      }
    },
    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet0"
          },
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "Tags": [
          {
            "Key": "Role",
            "Value": "ecs-instance",
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": 1
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": 1,
          "MaxBatchSize": 1,
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "InstanceMonitoring": "true",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xve\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource LaunchConfiguration --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n/opt/aws/bin/cfn-signal -e $? --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource ECSAutoScalingGroup --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/ecs/ecs.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ECS_CLUSTER=",
                      {
                        "Ref": "ECSCluster"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.hourly/authorized_keys": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -eu\ntest -z \"",
                      {
                        "Ref": "AuthorizedUsersUrl"
                      },
                      "\" && exit 0\ncurl --silent -f \"",
                      {
                        "Ref": "AuthorizedUsersUrl"
                      },
                      "\" > /tmp/authorized_keys\nmv /tmp/authorized_keys /home/ec2-user/.ssh/authorized_keys\nchmod 600 /home/ec2-user/.ssh/authorized_keys\nchown ec2-user: /home/ec2-user/.ssh/authorized_keys\n"
                    ]
                  ]
                },
                "mode": "000700",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "fetch-authorized-users": {
                "command": "/etc/cron.hourly/authorized_keys"
              }
            }
          }
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "VPC/EC2 Security Group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroup"
        }
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "GatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "Gateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Subnet0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "10.0.2.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            2,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "10.0.3.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Routes": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "RouteDefault": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "Gateway"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    },
    "Subnet0Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet0"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    },
    "Subnet1Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    },
    "Subnet2Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "Routes"
        }
      }
    }
  }
}
