{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Subnets": {
      "Description": "A comma separated list of subnets to put the EC2 instances into",
      "Type": "CommaDelimitedList"
    },
    "SecurityGroup": {
      "Description": "The security group to put the EC2 instances into",
      "Type": "String"
    },
    "KeyName": {
      "Description": "The ssh keypair used to access the ecs instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "AuthorizedUsersUrl": {
      "Description": "Optional - An url to periodically download ssh authorized_keys from",
      "Type": "String",
      "Default": ""
    },
    "InstanceType": {
      "Description": "The type of instance to use for the instances",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    },
    "MaxSize": {
      "Description": "The maximum number of instances to launch",
      "Type": "Number",
      "Default": 6
    },
    "DesiredCapacity": {
      "Description": "The desired capacity after launch",
      "Type": "Number",
      "Default": 3
    },
    "MinSize": {
      "Description": "The minumum number of instances to launch",
      "Type": "Number",
      "Default": 1
    },
    "DockerHubUsername": {
      "Type": "String",
      "Description": "Your username on the Docker Hub",
      "Default": ""
    },
    "DockerHubEmail": {
      "Type": "String",
      "Description": "Your email address on the Docker Hub",
      "Default": ""
    },
    "DockerHubPassword": {
      "Type": "String",
      "Description": "Your password on the Docker Hub",
      "NoEcho": "true",
      "Default": ""
    },
    "ECSCluster": {
      "Type": "String",
      "Description": "The name of the ECS cluster"
    },
    "LogspoutTarget": {
      "Type": "String",
      "Description": "Optional. logspout destination eg papertrail endpoint.",
      "Default": ""
    },
    "DatadogApiKey": {
      "Type": "String",
      "Description": "Optional. The datadog API key to push docker events into datadog.",
      "Default": ""
    }
  },
  "Outputs": {
    "StackType": {
      "Value": "ecs-former::ecs-stack"
    },
    "ECSCluster": {
      "Value": {
        "Ref": "ECSCluster"
      }
    },
    "SecurityGroup": {
      "Value": {
        "Ref": "SecurityGroup"
      }
    },
    "LogGroupName": {
      "Value": {
        "Ref": "ECSLogGroup"
      }
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": {
        "AMIID": "ami-40286957"
      },
      "us-east-2": {
        "AMIID": "ami-abf2a9ce"
      },
      "us-west-1": {
        "AMIID": "ami-20fab440"
      },
      "us-west-2": {
        "AMIID": "ami-562cf236"
      },
      "eu-west-1": {
        "AMIID": "ami-175f1964"
      },
      "eu-central-1": {
        "AMIID": "ami-c55ea2aa"
      },
      "ap-northeast-1": {
        "AMIID": "ami-010ed160"
      },
      "ap-southeast-1": {
        "AMIID": "ami-438b2f20"
      },
      "ap-southeast-2": {
        "AMIID": "ami-862211e5"
      }
    }
  },
  "Resources": {
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
      }
    },
    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ]
      }
    },
    "IAMPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstancePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData",
                "cloudformation:DescribeStackResource",
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:Create*",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
      }
    },
    "ECSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "Tags": [
          {
            "Key": "Role",
            "Value": "ecs-instance",
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": 1
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": 1,
          "MaxBatchSize": 1,
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "InstanceMonitoring": "true",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xve\nyum install -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource LaunchConfiguration --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n/opt/aws/bin/cfn-signal -e $? --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource ECSAutoScalingGroup --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/ecs/ecs.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ECS_CLUSTER=",
                      {
                        "Ref": "ECSCluster"
                      },
                      "\nECS_ENGINE_AUTH_TYPE=docker\nECS_ENGINE_AUTH_DATA={\"https://index.docker.io/v1/\":{\"username\":\"",
                      {
                        "Ref": "DockerHubUsername"
                      },
                      "\",\"password\":\"",
                      {
                        "Ref": "DockerHubPassword"
                      },
                      "\",\"email\":\"",
                      {
                        "Ref": "DockerHubEmail"
                      },
                      "\"}}\n"
                    ]
                  ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/home/ec2-user/.dockercfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\"https://index.docker.io/v1/\":{\"username\":\"",
                      {
                        "Ref": "DockerHubUsername"
                      },
                      "\",\"password\":\"",
                      {
                        "Ref": "DockerHubPassword"
                      },
                      "\",\"email\":\"",
                      {
                        "Ref": "DockerHubEmail"
                      },
                      "\"}}\n"
                    ]
                  ]
                },
                "owner": "ec2-user",
                "group": "ec2-user",
                "mode": "00400",
                "authentication": "S3AccessCreds"
              },
              "/etc/cron.hourly/authorized_keys": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -eu\ntest -z \"",
                      {
                        "Ref": "AuthorizedUsersUrl"
                      },
                      "\" && exit 0\ncurl --silent -f \"",
                      {
                        "Ref": "AuthorizedUsersUrl"
                      },
                      "\" > /tmp/authorized_keys\nmv /tmp/authorized_keys /home/ec2-user/.ssh/authorized_keys\nchmod 600 /home/ec2-user/.ssh/authorized_keys\nchown ec2-user: /home/ec2-user/.ssh/authorized_keys\n"
                    ]
                  ]
                },
                "mode": "000700",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "fetch-authorized-users": {
                "command": "/etc/cron.hourly/authorized_keys"
              },
              "install-cloudwatch-logs": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\ncat <<EOF > /etc/sysconfig/docker\nOPTIONS=\"--log-driver=awslogs --log-opt awslogs-region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      " --log-opt awslogs-group=",
                      {
                        "Ref": "ECSLogGroup"
                      },
                      "\"\nEOF\nservice docker restart\n"
                    ]
                  ]
                }
              },
              "logspout": {
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "test -n '",
                      {
                        "Ref": "LogspoutTarget"
                      },
                      "'"
                    ]
                  ]
                },
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -eu\n/usr/bin/docker run -d \\\n  --name=\"logspout\" \\\n  --restart=always \\\n  --hostname `hostname` \\\n  --volume=/var/run/docker.sock:/tmp/docker.sock \\\n  gliderlabs/logspout \\\n  ",
                      {
                        "Ref": "LogspoutTarget"
                      },
                      " &> /home/ec2-user/logspout.boot.log\n"
                    ]
                  ]
                }
              },
              "datadog": {
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "test -n '",
                      {
                        "Ref": "DatadogApiKey"
                      },
                      "'"
                    ]
                  ]
                },
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -eu\n/usr/bin/docker run -d \\\n  --restart=always \\\n  --name dd-agent \\\n  --hostname `hostname` \\\n  -p 172.17.42.1:8125:8125/udp \\\n  -e 'TAGS=cluster:",
                      {
                        "Ref": "ECSCluster"
                      },
                      "' \\\n  -e 'API_KEY=",
                      {
                        "Ref": "DatadogApiKey"
                      },
                      "' \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /proc/:/host/proc/:ro \\\n  -v /cgroup/:/host/sys/fs/cgroup:ro \\\n  datadog/docker-dd-agent &> /home/ec2-user/datadog.boot.log\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}
